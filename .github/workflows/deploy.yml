name: Server CI/CD (EC2 Rolling)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/server
      TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t $IMAGE:latest -t $IMAGE:$TAG .

      - name: Docker Hub push
        run: |
          docker push $IMAGE:latest
          docker push $IMAGE:$TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for compose file)
        uses: actions/checkout@v4

      - name: Prepare remote folder & network
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/server
            docker network create proxy || true

      - name: Upload compose
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/server/"

      - name: Create .env on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cat > /home/ubuntu/server/.env << 'EOF'
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            SPRING_PROFILES_ACTIVE=prod
            EOF
            chmod 600 /home/ubuntu/server/.env

      - name: Pull & Up
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd /home/ubuntu/server
            docker compose pull || true
            docker compose up -d --remove-orphans
            for i in {1..30}; do
              curl -fsS http://127.0.0.1:28080/actuator/health | grep -q '"status":"UP"' && ok=1 && break
              sleep 3
            done
            test "$ok" = "1" || (echo "Healthcheck failed" && exit 1)
            docker image prune -f
